## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get, setInverse = setinverse, getInverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 4
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get, setInverse = setinverse, getInverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 4
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get, setInverse = setinverse, getInverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 2
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get, setInverse = setinverse, getInverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 8
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get, setInverse = setinverse, getInverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 8
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
##   It has methods
##     set: to set the matrix
##     get: to get the matrix
##     setInverse: to set the inverse of the matrix <= ideally this method would not be callable
##     getInverse: to get the inverse of the matrix
makeCacheMatrix <- function(m_matrix = matrix()) {
m_inverse <- NULL
set <- function(m) {
m_matrix <- m
m_inverse <- NULL;
}
get <- function() { m_matrix }
setinverse <- function(inverse) { m_inverse <<-inverse }
getinverse <- function() { m_inverse }
list(set = set, get = get,
setInverse = setinverse, getInverse = getinverse)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##   If the inverse has already been calculated (and the matrix has not changed),
##   then cacheSolve should retrieve the inverse from the cache.
##
##   Ideally this method would not be a separate function, but be included in the getInverse function of
##   makeCacheMatrix and the setInverse function would be eliminated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getInverse()
if(is.null(inverse)) {
message("cacheSolve: solve for matrix inverse")
inverse <- solve(x$get())
x$setInverse(inverse)
}
inverse
}
## create a test matrix with random numbers
n <- 8
testMatrix <- matrix(data = runif(n * n, 0, 10), nrow = n, ncol = n, byrow = TRUE)
cacheMatrix <- makeCacheMatrix(testMatrix)
inverseMatrix <- cacheSolve(cacheMatrix)
identical(inverseMatrix, cacheSolve(cacheMatrix))
identical(cacheMatrix$getInverse(), inverseMatrix)
## verify results
testMatrix
cacheMatrix$getInverse()
testMatrix %*% inverseMatrix
x <-matrix(rnorm(200), 20, 10)
x
apply(x,mean)
apply(x,mean())
str(apply)
?apply
apply(x,1,mean)
apply(x,2,mean)
apply(x,3,mean)
apply(x,2,mean)
apply(x,2,sum)
apply(x,1,sum)
sapply(x,sum)
x
lapply(x,sum)
pollutantmean <- function(directory, pollutant, id = 1:332) {
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
library(datasets)
data(iris)
ls(iris)
mean(iris$Sepal.Length, na.rm = TRUE)
iris["Species" = "virginica"]
iris[Species = "virginica"]
iris[,Species = "virginica"]
iris[Species = "virginica",]
iris[iris.Species = "virginica"]
iris[iris$Species = "virginica"]
iris[iris$Species = "virginica",]
iris$Species
iris$Species = "virginica"
library(datasets)
data(iris)
iris$Species == "virginica"
iris[iris$Species == "virginica"]
iris[iris$Species == "virginica",]
library(datasets)
data(iris)
virginica <- iris[iris$Species == "virginica",]
mean(virginica$Sepal.Length, na.rm = TRUE)
library(datasets)
data(iris)
virginica <- iris[iris$Species == "virginica",]
mean(virginica$Sepal.Length)
View(virginica)
View(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
View(mtcars)
with(mtcars, tapply(hp, cyl, mean))
mtcars[mtcars$cyl == 8]
mtcars[mtcars$cyl == 8,]
mtcars[mtcars$cyl == 8,]$hp
with(mtcars, tapply(hp, cyl, mean))
mean(mtcars[mtcars$cyl == 8,]$hp)
with(mtcars, tapply(hp, cyl, mean))
mean(mtcars[mtcars$cyl == 8,]$hp) - mean(mtcars[mtcars$cyl == 4,]$hp)
with(mtcars, tapply(hp, cyl, mean))
mean(mtcars[mtcars$cyl == 8,]$hp) - mean(mtcars[mtcars$cyl == 4,]$hp)
209.21429 - 82.63636
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
debug(ls)
ls
ls
ls
ls
ls
set.seed(1)
rpois(5, 2)
str(rnorm)
?rnorm
?ppois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
x1 <- 10
x2 <- 12
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(datasets)
x1 <- 10
x2 <- 12
Rprof()
fit <- lm(y ~ x + e)
Rprof(NULL)
summaryRprof()
library(ggplot2)
classification <- readRDS("Source_Classification_Code.rds")
coalSCC <- as.character(classification[grep("Coal", classification$EI.Sector, ignore.case = TRUE, perl = TRUE),c("SCC")])
NEI <- readRDS("summarySCC_PM25.rds")
coal <- NEI[(NEI$SCC %in% coalSCC),]
setwd("GitHub/RepData_PeerAssessment1")
activityData <- read.csv("activity.csv", na.strings="NA")
activityData$hour <- as.double(as.integer(activityData$interval / 100 )) + (activityData$interval %% 100) / 60
activityData$date <- as.Date(activityData$date)
meanPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=mean)
colnames(meanPerDay) = c("date", "mean")
medianPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=median)
colnames(medianPerDay) = c("date", "median")
meanPerDay
perDay <- meanPerDay
perDay$median <- medianPerday$median
perday
setpsPerDay <- meanPerDay
stepsPerDay$median <- medianPerday$median
stepsPerDay
activityData <- read.csv("activity.csv", na.strings="NA")
activityData$hour <- as.double(as.integer(activityData$interval / 100 )) + (activityData$interval %% 100) / 60
activityData$date <- as.Date(activityData$date)
meanPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=mean)
colnames(meanPerDay) = c("date", "mean")
medianPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=median)
colnames(medianPerDay) = c("date", "median")
stepsPerDay <- meanPerDay
stepsPerDay$median <- medianPerday$median
stepsPerDay
stepsPerDay$median <- medianPerDay$median
stepsPerDay
as.array(stepsPerDay)
print(stepsPerDay)
stepsPerDay
rownames(stepsPerDay) <- NULL
stepsPerDay
rownames(stepsPerDay)
rownames(stepsPerDay) <- c(NULL)
stepsPerDay
stepsPerDay[,c("date", "mean", "median")]
data.matrix(stepsPerDay)
data.matrix(stepsPerDay, rownames.force = NA)
data.matrix(stepsPerDay, rownames.force = NULL)
data.matrix(stepsPerDay, rownames = NULL)
data.matrix(stepsPerDay, rownames = NA)
data.matrix(stepsPerDay, rownames = "")
as.matrix(stepsPerDay)
data.matrix(stepsPerDay[1:3])
stepsPerDay[1:3]
matrix(stepsPerDay[1:3])
chart(stepsPerDay)
display(stepsPerDay)
str(stepsPerDay)
stepsPerDay
print("Steps Per Day")
stepsPerDay
qplot(hour, steps, data = intervalActivity, facets = . ~ type)
activityData <- read.csv("activity.csv", na.strings="NA")
activityData$date <- as.Date(activityData$date)
activityData$hour <- as.double(as.integer(activityData$interval / 100 )) + (activityData$interval %% 100) / 60
meanPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=mean)
colnames(meanPerDay) = c("date", "mean")
medianPerDay <- aggregate(activityData$steps, by=list(activityData$date), FUN=median)
colnames(medianPerDay) = c("date", "median")
activity <- activityData[! is.na(activityData$steps),]
dayType <- function(date) {
weekday <- weekdays(date)
if (weekday == "Saturday" || weekday == "Sunday") {
return("weekend")
}
return("weekday")
}
# add column daytype
activity$daytype <- factor(sapply(as.Date(activity$date), dayType))
# create dataset to fill NA values
meanSteps <- aggregate(activity$steps, by=list(activity$interval, activity$daytype), FUN = mean)
colnames(meanSteps) <- c("interval", "daytype", "steps")
# copy original dataset
newActivity <- activityData
# fill in NA values
newActivity$daytype <- factor(sapply(as.Date(newActivity$date), dayType))
rowCnt <- nrow(newActivity)
for(row in 1:rowCnt) {
if(is.na(newActivity$steps[row])) {
interval <- newActivity$interval[row]
type <- as.character(newActivity$daytype[row])
newActivity$steps[row] <- as.integer(meanSteps[meanSteps$interval == interval & meanSteps$daytype == type, "steps"] + 0.5)
}
}
newTotalPerDay <- aggregate(newActivity$steps, by=list(newActivity$date), FUN=sum)
hist(newTotalPerDay$x, main = paste("Histogram of Number of Steps per Day"), xlab = "Number of Steps per Day")
newMeanPerDay <- aggregate(newActivity$steps, by=list(newActivity$date), FUN=mean)
colnames(newMeanPerDay) = c("date", "mean")
newMedianPerDay <- aggregate(newActivity$steps, by=list(newActivity$date), FUN=median)
plot(newMeanPerDay$date, newMeanPerDay$mean, type = "s", xlab = "date", ylab = "steps", col="blue")
lines(newMedianPerDay$date, newMedianPerDay$median, type = "s", col = "green")
legend("top", legend = c("mean", "original mean", "median"), bty = "n", lty = 1, col = c("blue", "green"))
newMedianPerDay
newActivity
plot(newMeanPerDay$date, newMeanPerDay$mean, type = "s", xlab = "date", ylab = "steps", col="blue")
lines(newMedianPerDay$date, newMedianPerDay$median, type = "s", col = "green")
legend("top", legend = c("mean", "median"), bty = "n", lty = 1, col = c("blue", "green"))
View(newMedianPerDay)
View(newMedianPerDay)
plot(newMeanPerDay$date, newMeanPerDay$mean, type = "s", xlab = "date", ylab = "steps", col="blue")
lines(newMedianPerDay$date, newMedianPerDay$median, type = "s", col = "green")
legend("top", legend = c("mean", "median"), bty = "n", lty = 1, col = c("blue", "green"))
View(newMeanPerDay)
View(newMeanPerDay)
View(newMedianPerDay)
View(newMedianPerDay)
View(newMedianPerDay)
View(newMedianPerDay)
colnames(newMedianPerDay) = c("date", "median")
plot(newMeanPerDay$date, newMeanPerDay$mean, type = "s", xlab = "date", ylab = "steps", col="blue")
lines(newMedianPerDay$date, newMedianPerDay$median, type = "s", col = "green")
legend("top", legend = c("mean", "median"), bty = "n", lty = 1, col = c("blue", "green"))
weekdayActivity <- newActivity[newActivity$daytype == "weekday",]
weekdayMeanPerInterval <- aggregate(weekdayActivity$steps, by=list(weekdayActivity$hour), FUN = mean)
colnames(weekdayMeanPerInterval) = c("hour", "steps")
weekendActivity <- newActivity[newActivity$daytype == "weekend",]
weekendMeanPerInterval <- aggregate(weekendActivity$steps, by=list(weekendActivity$hour), FUN = mean)
colnames(weekendMeanPerInterval) = c("hour", "steps")
plot(weekdayMeanPerInterval$hour, weekdayMeanPerInterval$"mean steps", type="s", main = "Average Steps per Interval", xlab = "hour", ylab = "steps per 5 minute interval", col="blue")
lines(weekendMeanPerInterval$hour, weekendMeanPerInterval$"median steps", type="s", col="green")
legend("topright", legend = c("weekday", "weekend"), bty = "n", lty = 1, col = c("blue", "green"))
plot(weekdayMeanPerInterval$hour, weekdayMeanPerInterval$steps, type="s", main = "Average Steps per Interval", xlab = "hour", ylab = "steps per 5 minute interval", col="blue")
lines(weekendMeanPerInterval$hour, weekendMeanPerInterval$steps, type="s", col="green")
legend("topright", legend = c("weekday", "weekend"), bty = "n", lty = 1, col = c("blue", "green"))
weekdayActivity$type <- "weekday"
weekendActivity$type <- "weekend"
View(weekendActivity)
View(weekendActivity)
library(ggplot2)
intervalActivity <- rbind(weekdayActivity, weekendActivity)
qplot(hour, steps, data = intervalActivity, facets = . ~ daytype)
qplot(hour, steps, data = intervalActivity, facets = daytype ~ .)
View(weekdayMeanPerInterval)
View(weekdayMeanPerInterval)
weekdayMeanPerInterval$daytype = "weekday"
weekendMeanPerInterval$daytype = "weekend"
meanPerInterval <- rbind(weekdayMeanPerInterval$daytype, weekendMeanPerInterval$daytype)
qplot(hour, steps, data = meanPerInterval, facets = daytype ~ .)
qplot(hour, steps, data = meanPerInterval, geom = "line", facets = daytype ~ .)
weekdayMeanPerInterval$daytype = "weekday"
weekendMeanPerInterval$daytype = "weekend"
meanPerInterval <- rbind(weekdayMeanPerInterval$daytype, weekendMeanPerInterval$daytype)
qplot(hour, steps, data = meanPerInterval, geom = "line", facets = daytype ~ .)
str(meanPerInterval)
str(activityData)
meanPerInterval <- data.frame(rbind(weekdayMeanPerInterval$daytype, weekendMeanPerInterval$daytype))
str(meanPerInterval)
qplot(hour, steps, data = meanPerInterval, geom = "line", facets = daytype ~ .)
meanPerInterval <- rbind(weekdayMeanPerInterval, weekendMeanPerInterval)
str(meanPerInterval)
qplot(hour, steps, data = meanPerInterval, geom = "line", facets = daytype ~ .)
qplot(hour, steps, data = meanPerInterval, geom = "line", main = "Average Steps per 5 Minute Interval", facets = daytype ~ .)
```{r}
